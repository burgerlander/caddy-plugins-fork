{
	debug
	admin off
	auto_https off
	http_port 8000

	mediocre_caddy_plugins {
		metrics {
			histogram "custom_request_seconds" {
				labels path
			}

			histogram "custom_response_bytes" {
				labels path
				buckets 256 1024 4096 16384 65536 262144 1048576 4194304
			}
		}
	}
}

http://metrics.localhost {
	metrics
}

http://git-remote-repo.localhost {
	root example/git-remote-repo

	# Exclude URL paths related to the git v2 smart protocol, so that the git
	# CLI still works.
	@pow expression `!path("*/info/refs", "*/git-upload-pack", "*/git-receive-pack")`
	proof_of_work @pow {
		template `{http.vars.root}/pow.html`
	}

	# git_remote_repo requires that repo's sub-directory in the URL path has
	# already been stripped. handle_path takes care of this.
	handle_path /repo.git/* {

		# Serve the git repository which can be found in the test-repo.git
		# sub-directory of the site root.
		git_remote_repo * "{http.vars.root}/test-repo.git"
	}

	file_server
}

http://gemtext.localhost {
	root example/gemtext/static

	request_timing_metric "custom_request_seconds" {
		label path {http.request.uri.path}
		match status 200
	}

	response_size_metric "custom_response_bytes" {
		label path {http.request.uri.path}
		match status 200
	}

	# Allow for either index.html or index.gmi files when serving directories
	try_files {path} {path}/index.html {path}/index.gmi

	handle_path /gemtext/gmisub.rss.xml {
		rewrite /gemtext/gmisub.gmi
		gemlog_to_feed {
			format rss
			author_name "Tester"
			author_email "nun@ya.biz"
		}
		file_server
	}

	handle_path /gemtext/gmisub.atom.xml {
		rewrite /gemtext/gmisub.gmi
		gemlog_to_feed {
			format atom
			author_name "Tester"
			author_email "nun@ya.biz"
		}
		file_server
	}

	handle_path /gemtext/gmisub.json {
		rewrite /gemtext/gmisub.gmi
		gemlog_to_feed {
			format json
			author_name "Tester"
			author_email "nun@ya.biz"
		}
		file_server
	}

	handle {
		gemtext {
			root example/gemtext/tpl
			template render_gemtext.html
			link_template render_gemtext_link.html
		}
		file_server
	}
}

http://templates.localhost {
	root example/gemtext/static

	# If a directory has an index.gmi file, then that file will be served when
	# the directory is requested.
	try_files {path} {path}/index.gmi

	@gmi path *.gmi

	# Handle all requests for .gmi files specially.
	route @gmi {

		templates {
			# The templates directive is given a different root, so that other
			# template snippets within the tpl directory could theoretically be
			# used within render_gemtext_with_templates.html.
			root example

			# Include the gemtext extention to make the gemtext function
			# available within the template.
			extensions {
				gemtext_function {
					gateway_url "https://gemini.tildeverse.org/?gemini://"
				}
			}
		}

		# We "respond" with a template body here, which will be processed by the
		# templates directive above. This body simply imports the template we
		# actually want. Setting Content-Type is required because there's no
		# actual file for Caddy to determine the value from.
		header Content-Type "text/html; charset=utf-8"
		respond `{{ include "tpl/render_gemtext_with_templates.html" }}`
	}

	# All other files are handled directly by the file_server.
	file_server
}
